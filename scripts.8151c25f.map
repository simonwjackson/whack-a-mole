{"version":3,"sources":["src\\scripts\\utils.js","src\\scripts\\state.js","src\\scripts\\index.js"],"names":["curry","xs","length","Error","fn","bind","pipe","ops","reduce","a","b","arg","rand","min","max","Math","ceil","floor","random","$","document","querySelector","query","$$","querySelectorAll","html","el","data","innerHTML","getById","getElementById","createEl","tag","content","classes","id","createElement","map","classList","add","cl","append","to","appendChild","prepend","unload","addEvent","name","addEventListener","getByPlacement","num","between","when","pred","whenTrueFn","x","subtract","render","moles","moleState","idx","remove","state","score","time","updateMole","gameLoop","newMoleState","settings","timing","start","gameTimer","setInterval","gameInterval","stop","reset","timer","createButtons","app","resetBtn","stopBtn","startBtn","whack","contains","placement","parseInt","dataset","sfx","currentTime","play","setupEvents","e","target","stopPropagation","numPadToGridPlacement","numpadInput","numWhack","tryWhack","key","init","grid","img","setAttribute","mole","item"],"mappings":"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","file":"scripts.8151c25f.map","sourceRoot":"..","sourcesContent":["const curry = fn => {\r\n  return (...xs) => {\r\n    if (xs.length === 0) {\r\n      throw Error('EMPTY INVOCATION')\r\n    }\r\n    if (xs.length >= fn.length) {\r\n      return fn(...xs);\r\n    }\r\n    return curry(fn.bind(null, ...xs))\r\n  }\r\n}\r\nexport const pipe = (...ops) => ops.reduce((a, b) => (arg) => b(a(arg))) \r\nexport const rand = (min, max) => {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n\r\n  return Math.floor(Math.random() * (max - min + 1)) + min //The maximum is inclusive and the minimum is inclusive\r\n}\r\nexport const $ = query => document.querySelector(query)\r\nexport const $$ = query => document.querySelectorAll(query)\r\nexport const html = curry((el, data) => {\r\n  el.innerHTML = data\r\n  return el\r\n})\r\nexport const getById = query => document.getElementById(query)\r\nexport const createEl = curry((tag, content, classes, id) => {\r\n  const el = document.createElement(tag)\r\n  html(el, content)\r\n  classes.map(cl => el.classList.add(cl))\r\n  if (id) el.id = id\r\n  return el\r\n})\r\nexport const append = curry((to, el) => {\r\n  to.appendChild(el)\r\n  return el\r\n})\r\nexport const prepend = curry((to, el) => {\r\n  to.prepend(el)\r\n  return el\r\n})\r\nexport const unload = el => html(el, '')  \r\nexport const addEvent = curry((name, fn, el) => {\r\n  el.addEventListener(name, fn)\r\n  return el\r\n})\r\nexport const getByPlacement = num => $(`.grid__item[data-placement=\"${num}\"]`)\r\nexport const between = curry((min, max, num) => num >= min && num <= max)\r\nexport const when = curry((pred, whenTrueFn, x) => pred(x) ? whenTrueFn(x) : x)\r\nexport const subtract = curry((a, b) => b - a)\r\n","export default {\r\n  moles: [\r\n    0, 0, 0,\r\n    0, 0, 0,\r\n    0, 0, 0\r\n  ],\r\n  score: 0,\r\n  plays: 0,\r\n  time: 0,\r\n  settings: {\r\n    timing: {\r\n      timer: 30000,\r\n      max: 2000,\r\n      min: 1000\r\n    }\r\n  },\r\n  gameTimer: null,\r\n  gameLoop: null\r\n}","import '../styles/main.css'\r\nimport mole from '../images/mole.png'\r\nimport {\r\n  rand,\r\n  $,\r\n  getById,\r\n  html,\r\n  unload,\r\n  createEl,\r\n  prepend,\r\n  pipe,\r\n  addEvent,\r\n  getByPlacement,\r\n  when,\r\n  between,\r\n  subtract } from './utils'\r\nimport state from './state'\r\n\r\nconst render = () => {\r\n  state.moles.map((moleState, idx) => {\r\n    const el = getByPlacement(idx)\r\n    if (moleState === 1) el.classList.add('is-active')\r\n    else el.classList.remove('is-active')\r\n  })\r\n\r\n  html(getById('score'), `Score: ${state.score}`)\r\n  html(getById('time'), `Time: ${state.time / 1000}`)\r\n}\r\n\r\nconst updateMole = (moles, idx, state) => {\r\n  moles[idx] = state\r\n  render()\r\n}\r\n\r\nconst gameLoop = () => {\r\n  state.moles.map((moleState, idx) => {\r\n    const newMoleState = rand(0, 1)\r\n    updateMole(state.moles, idx, newMoleState)\r\n\r\n    if (newMoleState === 1) {\r\n      setTimeout(() => {\r\n        updateMole(state.moles, idx, 0)\r\n      }, rand(state.settings.timing.min, state.settings.timing.max))\r\n    }\r\n  })\r\n\r\n  render()\r\n}\r\n\r\nconst start = () => {\r\n  const interval = 1000\r\n\r\n  gameLoop()\r\n  state.gameTimer = setInterval(() => {\r\n    if (state.time <= interval) {\r\n      state.moles = state.moles.map(() => 0)\r\n      state.time = 0\r\n      clearInterval(state.gameTimer)\r\n    } else {\r\n      state.time -= interval\r\n    }\r\n    render()\r\n  }, interval)\r\n\r\n  state.gameInterval = setInterval(() => {\r\n    if (state.time <= 0) {\r\n      clearInterval(state.gameInterval)\r\n      return\r\n    }\r\n\r\n    gameLoop()\r\n  }, state.settings.timing.max)\r\n}\r\n\r\nconst stop = () => {\r\n  clearInterval(state.gameTimer)\r\n  clearInterval(state.gameInterval)\r\n  render()\r\n}\r\n\r\nconst reset = () => {\r\n  stop()\r\n  state.time = state.settings.timing.timer\r\n  state.score = 0\r\n  render()\r\n}\r\n\r\nconst createButtons = () => {\r\n  const app = $('.top')\r\n\r\n  const resetBtn = createEl('button', 'Reset', ['button', 'button--reset'], 'reset')\r\n  addEvent('click', reset, resetBtn)\r\n  prepend(app, resetBtn)\r\n\r\n  const stopBtn = createEl('button', 'Stop', ['button', 'button--stop'], 'stop')\r\n  addEvent('click', stop, stopBtn)\r\n  prepend(app, stopBtn)\r\n\r\n  const startBtn = createEl('button', 'Start', ['button'], 'start')\r\n  addEvent('click', start, startBtn)\r\n  prepend(app, startBtn)\r\n}\r\n\r\nconst whack = el => {\r\n  const isClickable = el.classList.contains('grid__item')\r\n  if (!isClickable) return\r\n\r\n  const placement = parseInt(el.dataset.placement)\r\n  const moleState = state.moles[placement]\r\n\r\n  if (moleState === 1) {\r\n    const sfx = $('#whack')\r\n    sfx.currentTime = 0 \r\n    sfx.play()\r\n    state.score++\r\n    updateMole(state.moles, placement, 0)\r\n  }\r\n}\r\n\r\nconst setupEvents = () => {\r\n  $('.grid')\r\n    .addEventListener('mousedown', e => {\r\n      whack(e.target)\r\n      e.stopPropagation()\r\n    })\r\n}\r\n\r\nconst numPadToGridPlacement = num => {\r\n  if (num <= 3) return num + 6\r\n  else if (num > 6) return num - 6\r\n  return num\r\n}\r\n\r\nconst numpadInput = () => {\r\n  const numWhack = pipe(parseInt, numPadToGridPlacement, subtract(1), getByPlacement, whack)\r\n  const tryWhack = when(between(1, 9), numWhack)\r\n  document.addEventListener('keypress', e => tryWhack(e.key))\r\n}\r\n\r\nconst init = () => {\r\n  createButtons()\r\n  setupEvents()\r\n  numpadInput()\r\n\r\n  const grid = $('.grid')\r\n  unload(grid)\r\n\r\n  state.time = state.settings.timing.timer\r\n\r\n  state.moles.map((el, idx) => {\r\n    const img = document.createElement('img')\r\n    img.classList.add('img-responsive') \r\n    img.setAttribute('src', mole)\r\n    \r\n    const item = document.createElement('div')\r\n    item.classList.add('grid__item')\r\n    item.dataset.placement = idx\r\n    item.appendChild(img)\r\n\r\n    grid.appendChild(item)\r\n  })\r\n\r\n  render()\r\n}\r\n\r\naddEvent('DOMContentLoaded', init, document)"]}